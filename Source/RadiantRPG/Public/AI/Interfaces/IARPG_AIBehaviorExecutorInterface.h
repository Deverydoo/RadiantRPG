// Source/RadiantRPG/Public/AI/Interfaces/IARPG_AIBehaviorExecutorInterface.h

#pragma once

#include "CoreMinimal.h"
#include "UObject/Interface.h"
#include "GameplayTags.h"
#include "Types/ARPG_AITypes.h"
#include "IARPG_AIBehaviorExecutorInterface.generated.h"

/**
 * Execution status for AI behaviors
 */
UENUM(BlueprintType)
enum class EARPG_BehaviorExecutionStatus : uint8
{
    NotStarted      UMETA(DisplayName = "Not Started"),
    InProgress      UMETA(DisplayName = "In Progress"),
    Succeeded       UMETA(DisplayName = "Succeeded"),
    Failed          UMETA(DisplayName = "Failed"),
    Interrupted     UMETA(DisplayName = "Interrupted"),
    MAX             UMETA(Hidden)
};

/**
 * Behavior execution result
 */
USTRUCT(BlueprintType)
struct RADIANTRPG_API FARPG_BehaviorExecutionResult
{
    GENERATED_BODY()

    /** Final status of the behavior execution */
    UPROPERTY(BlueprintReadOnly, Category = "Result")
    EARPG_BehaviorExecutionStatus Status = EARPG_BehaviorExecutionStatus::NotStarted;

    /** Success/completion ratio (0.0 = complete failure, 1.0 = complete success) */
    UPROPERTY(BlueprintReadOnly, Category = "Result")
    float CompletionRatio = 0.0f;

    /** Time taken to execute the behavior */
    UPROPERTY(BlueprintReadOnly, Category = "Result")
    float ExecutionTime = 0.0f;

    /** Optional message about the execution result */
    UPROPERTY(BlueprintReadOnly, Category = "Result")
    FString ResultMessage;

    /** Additional data about the execution */
    UPROPERTY(BlueprintReadOnly, Category = "Result")
    TMap<FString, FString> ResultData;

    FARPG_BehaviorExecutionResult()
    {
        Status = EARPG_BehaviorExecutionStatus::NotStarted;
        CompletionRatio = 0.0f;
        ExecutionTime = 0.0f;
    }
};

UINTERFACE(MinimalAPI, Blueprintable)
class UARPG_AIBehaviorExecutorInterface : public UInterface
{
    GENERATED_BODY()
};

/**
 * Interface for AI Behavior Execution systems
 * Allows different behavior execution implementations while maintaining modular design
 * Behaviors execute intents generated by the AI Brain system
 */
class RADIANTRPG_API IARPG_AIBehaviorExecutorInterface
{
    GENERATED_BODY()

public:
    /**
     * Check if this executor can handle a specific intent
     * @param Intent The intent to check
     * @return True if this executor can handle the intent
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "AI Behavior")
    bool CanExecuteIntent(const FARPG_AIIntent& Intent);

    /**
     * Start executing an intent
     * @param Intent The intent to execute
     * @return True if execution started successfully
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "AI Behavior")
    bool StartExecution(const FARPG_AIIntent& Intent);

    /**
     * Update ongoing behavior execution
     * @param DeltaTime Time since last update
     * @return Current execution status
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "AI Behavior")
    EARPG_BehaviorExecutionStatus UpdateExecution(float DeltaTime);

    /**
     * Stop current behavior execution
     * @param bForceStop Whether to force immediate stop or allow graceful completion
     * @return Final execution result
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "AI Behavior")
    FARPG_BehaviorExecutionResult StopExecution(bool bForceStop);

    /**
     * Get current execution progress
     * @return Progress ratio (0.0 to 1.0)
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "AI Behavior")
    float GetExecutionProgress() const;

    /**
     * Check if currently executing a behavior
     * @return True if execution is in progress
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "AI Behavior")
    bool IsExecuting() const;

    /**
     * Get the currently executing intent
     * @return Current intent being executed
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "AI Behavior")
    FARPG_AIIntent GetCurrentIntent() const;

    /**
     * Get supported intent types
     * @return Array of intent tags this executor can handle
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "AI Behavior")
    TArray<FGameplayTag> GetSupportedIntentTypes() const;

    /**
     * Get execution priority for a specific intent
     * Higher priority executors are preferred when multiple can handle the same intent
     * @param Intent The intent to check
     * @return Priority value (higher = more preferred)
     */
    UFUNCTION(BlueprintImplementableEvent, Category = "AI Behavior")
    int32 GetExecutionPriority(const FARPG_AIIntent& Intent) const;
};