// Source/RadiantRPG/Public/Types/AITypes.h

#pragma once

#include "CoreMinimal.h"
#include "GameplayTagContainer.h"
#include "CoreTypes.h"
#include "RadiantAITypes.generated.h"

/**
 * AI behavior states
 */
UENUM(BlueprintType)
enum class EAIBehaviorState : uint8
{
    Idle            UMETA(DisplayName = "Idle"),
    Curious         UMETA(DisplayName = "Curious"),
    Alert           UMETA(DisplayName = "Alert"),
    Combat          UMETA(DisplayName = "Combat"),
    Fleeing         UMETA(DisplayName = "Fleeing"),
    Seeking         UMETA(DisplayName = "Seeking"),
    Working         UMETA(DisplayName = "Working"),
    Socializing     UMETA(DisplayName = "Socializing"),
    Resting         UMETA(DisplayName = "Resting"),
    Eating          UMETA(DisplayName = "Eating"),
    Patrolling      UMETA(DisplayName = "Patrolling"),
    Following       UMETA(DisplayName = "Following"),
    Dead            UMETA(DisplayName = "Dead"),
    
    MAX             UMETA(Hidden)
};

/**
 * AI personality traits
 */
UENUM(BlueprintType)
enum class EPersonalityTrait : uint8
{
    Aggressive      UMETA(DisplayName = "Aggressive"),
    Cautious        UMETA(DisplayName = "Cautious"),
    Curious         UMETA(DisplayName = "Curious"),
    Friendly        UMETA(DisplayName = "Friendly"),
    Cowardly        UMETA(DisplayName = "Cowardly"),
    Brave           UMETA(DisplayName = "Brave"),
    Greedy          UMETA(DisplayName = "Greedy"),
    Generous        UMETA(DisplayName = "Generous"),
    Lazy            UMETA(DisplayName = "Lazy"),
    Industrious     UMETA(DisplayName = "Industrious"),
    Social          UMETA(DisplayName = "Social"),
    Solitary        UMETA(DisplayName = "Solitary"),
    
    MAX             UMETA(Hidden)
};

/**
 * AI needs that drive behavior
 */
UENUM(BlueprintType)
enum class ENeedType : uint8
{
    Hunger          UMETA(DisplayName = "Hunger"),
    Thirst          UMETA(DisplayName = "Thirst"),
    Sleep           UMETA(DisplayName = "Sleep"),
    Safety          UMETA(DisplayName = "Safety"),
    Social          UMETA(DisplayName = "Social"),
    Entertainment   UMETA(DisplayName = "Entertainment"),
    Wealth          UMETA(DisplayName = "Wealth"),
    Power           UMETA(DisplayName = "Power"),
    Knowledge       UMETA(DisplayName = "Knowledge"),
    Comfort         UMETA(DisplayName = "Comfort"),
    
    MAX             UMETA(Hidden)
};

USTRUCT(BlueprintType)
struct FNeedData
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Need")
    ENeedType NeedType;

    /** Current need level (0.0 = desperate, 1.0 = fully satisfied) */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Need", meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float CurrentLevel;

    /** Rate at which this need decays per second */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Need", meta = (ClampMin = "0.0"))
    float DecayRate;

    /** Threshold below which this need becomes critical */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Need", meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float CriticalThreshold;

    /** Whether this need is currently critical */
    UPROPERTY(BlueprintReadOnly, Category = "Need")
    bool bIsCritical;

    /** Whether this need affects character behavior */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Need")
    bool bIsActive;

    FNeedData()
    {
        NeedType = ENeedType::Hunger;
        CurrentLevel = 1.0f;
        DecayRate = 0.001f; // Very slow decay by default
        CriticalThreshold = 0.2f;
        bIsCritical = false;
        bIsActive = true;
    }
};


/**
 * High-level AI intents generated by the brain
 */
UENUM(BlueprintType)
enum class EAIIntent : uint8
{
    None            UMETA(DisplayName = "None"),
    Explore         UMETA(DisplayName = "Explore"),
    Attack          UMETA(DisplayName = "Attack"),
    Defend          UMETA(DisplayName = "Defend"),
    Flee            UMETA(DisplayName = "Flee"),
    Hide            UMETA(DisplayName = "Hide"),
    Eat             UMETA(DisplayName = "Eat"),
    Drink           UMETA(DisplayName = "Drink"),
    Sleep           UMETA(DisplayName = "Sleep"),
    Socialize       UMETA(DisplayName = "Socialize"),
    Work            UMETA(DisplayName = "Work"),
    Trade           UMETA(DisplayName = "Trade"),
    Steal           UMETA(DisplayName = "Steal"),
    Help            UMETA(DisplayName = "Help"),
    Follow          UMETA(DisplayName = "Follow"),
    Guard           UMETA(DisplayName = "Guard"),
    Patrol          UMETA(DisplayName = "Patrol"),
    Investigate     UMETA(DisplayName = "Investigate"),
    Gather          UMETA(DisplayName = "Gather Resources"),
    Craft           UMETA(DisplayName = "Craft"),
    
    MAX             UMETA(Hidden)
};

/**
 * Memory types for the AI memory system
 */
UENUM(BlueprintType)
enum class EMemoryType : uint8
{
    Location        UMETA(DisplayName = "Location"),
    Character       UMETA(DisplayName = "Character"),
    Event           UMETA(DisplayName = "Event"),
    Item            UMETA(DisplayName = "Item"),
    Threat          UMETA(DisplayName = "Threat"),
    Resource        UMETA(DisplayName = "Resource"),
    Knowledge       UMETA(DisplayName = "Knowledge"),
    Relationship    UMETA(DisplayName = "Relationship"),
    
    MAX             UMETA(Hidden)
};

/**
 * Perception stimulus types
 */
UENUM(BlueprintType)
enum class EAIStimulusType : uint8
{
    Sight           UMETA(DisplayName = "Sight"),
    Danger          UMETA(DisplayName = "Danger"),
    Social          UMETA(DisplayName = "Social"),
    Visual          UMETA(DisplayName = "Visual"),
    Opportunity     UMETA(DisplayName = "Opportunity"),
    Sound           UMETA(DisplayName = "Sound"),
    Touch           UMETA(DisplayName = "Touch"),
    Damage          UMETA(DisplayName = "Damage"),
    Magic           UMETA(DisplayName = "Magic"),
    Telepathy       UMETA(DisplayName = "Telepathy"),
    
    MAX             UMETA(Hidden)
};

/**
 * Relationship standings between characters/factions
 */
UENUM(BlueprintType)
enum class ERelationshipStanding : uint8
{
    Hostile         UMETA(DisplayName = "Hostile"),        // -100 to -60
    Unfriendly      UMETA(DisplayName = "Unfriendly"),     // -60 to -20
    Neutral         UMETA(DisplayName = "Neutral"),        // -20 to 20
    Friendly        UMETA(DisplayName = "Friendly"),       // 20 to 60
    Allied          UMETA(DisplayName = "Allied"),         // 60 to 100
    
    MAX             UMETA(Hidden)
};

/**
 * Single need value
 */
USTRUCT(BlueprintType)
struct FNeedValue
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    ENeedType NeedType = ENeedType::Hunger;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "100.0"))
    float CurrentValue = 50.0f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "100.0"))
    float MaxValue = 100.0f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float DecayRate = 1.0f; // Per minute

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "100.0"))
    float CriticalThreshold = 20.0f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float Priority = 1.0f;

    FNeedValue()
    {
    }

    bool IsCritical() const { return CurrentValue <= CriticalThreshold; }
    float GetNormalizedValue() const { return CurrentValue / MaxValue; }
};

/**
 * Personality configuration
 */
USTRUCT(BlueprintType)
struct FPersonalityProfile
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    TMap<EPersonalityTrait, float> TraitStrengths;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float Aggression = 0.5f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float Curiosity = 0.5f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float Sociability = 0.5f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float Bravery = 0.5f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float Greed = 0.5f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float Loyalty = 0.5f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float Intelligence = 0.5f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, meta = (ClampMin = "0.0", ClampMax = "10.0"))
    float BoredomThreshold = 5.0f; // Time in minutes before curiosity kicks in

    FPersonalityProfile()
    {
    }
};

/**
 * Memory entry for AI recall
 */
USTRUCT(BlueprintType)
struct FMemoryEntry
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FGuid MemoryID;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    EMemoryType MemoryType = EMemoryType::Event;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    TWeakObjectPtr<AActor> Subject;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FVector Location;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FGameplayTagContainer Tags;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float Importance = 1.0f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float Timestamp = 0.0f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float DecayRate = 0.1f; // How quickly importance decays

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    bool bPermanent = false;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    TMap<FName, FString> CustomData;

    FMemoryEntry()
    {
        MemoryID = FGuid::NewGuid();
    }

    float GetCurrentImportance(float CurrentTime) const
    {
        if (bPermanent) return Importance;
        float TimePassed = CurrentTime - Timestamp;
        return FMath::Max(0.0f, Importance - (TimePassed * DecayRate));
    }
};

/**
 * Stimulus data for perception events
 */
USTRUCT(BlueprintType)
struct FStimulusData
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    EAIStimulusType Type = EAIStimulusType::Sight;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    TWeakObjectPtr<AActor> Source;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FVector Location;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float Intensity = 1.0f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float Timestamp = 0.0f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FGameplayTagContainer StimulusTags;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    TMap<FName, float> AdditionalData;

    FStimulusData()
    {
    }
};

/**
 * AI decision context for brain processing
 */
USTRUCT(BlueprintType)
struct FAIDecisionContext
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadWrite)
    EAIBehaviorState CurrentState = EAIBehaviorState::Idle;

    UPROPERTY(BlueprintReadWrite)
    TArray<FNeedValue> CurrentNeeds;

    UPROPERTY(BlueprintReadWrite)
    TArray<FStimulusData> RecentStimuli;

    UPROPERTY(BlueprintReadWrite)
    TArray<FMemoryEntry> RelevantMemories;

    UPROPERTY(BlueprintReadWrite)
    FPersonalityProfile Personality;

    UPROPERTY(BlueprintReadWrite)
    FVector CurrentLocation;

    UPROPERTY(BlueprintReadWrite)
    TWeakObjectPtr<AActor> CurrentTarget;

    UPROPERTY(BlueprintReadWrite)
    float TimeSinceLastStimulus = 0.0f;

    UPROPERTY(BlueprintReadWrite)
    FGameplayTagContainer ActiveTags;

    FAIDecisionContext()
    {
    }
};

/**
 * AI intent with priority and context
 */
USTRUCT(BlueprintType)
struct FAIIntentData
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    EAIIntent Intent = EAIIntent::None;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float Priority = 0.0f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    TWeakObjectPtr<AActor> Target;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FVector TargetLocation;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float Duration = 0.0f; // 0 means until completed

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FGameplayTagContainer RequiredTags;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    TMap<FName, FString> Parameters;

    FAIIntentData()
    {
    }
};

/**
 * Relationship data between entities
 */
USTRUCT(BlueprintType)
struct FRelationshipData
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    TWeakObjectPtr<AActor> Target;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float RelationshipValue = 0.0f; // -100 to 100

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    ERelationshipStanding Standing = ERelationshipStanding::Neutral;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    TArray<FMemoryEntry> SharedMemories;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float LastInteractionTime = 0.0f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FGameplayTagContainer RelationshipTags;

    FRelationshipData()
    {
    }

    void UpdateStanding()
    {
        if (RelationshipValue < -60.0f)
            Standing = ERelationshipStanding::Hostile;
        else if (RelationshipValue < -20.0f)
            Standing = ERelationshipStanding::Unfriendly;
        else if (RelationshipValue < 20.0f)
            Standing = ERelationshipStanding::Neutral;
        else if (RelationshipValue < 60.0f)
            Standing = ERelationshipStanding::Friendly;
        else
            Standing = ERelationshipStanding::Allied;
    }
};

USTRUCT(BlueprintType)
struct FStimulus
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadWrite, EditAnywhere)
    EAIStimulusType Type = EAIStimulusType::Sight;

    UPROPERTY(BlueprintReadWrite, EditAnywhere)
    FVector Location = FVector::ZeroVector;

    UPROPERTY(BlueprintReadWrite, EditAnywhere)
    AActor* Source = nullptr;

    UPROPERTY(BlueprintReadWrite, EditAnywhere)
    float Intensity = 1.0f;

    UPROPERTY(BlueprintReadWrite, EditAnywhere)
    float Timestamp = 0.0f;

    UPROPERTY(BlueprintReadWrite, EditAnywhere)
    FGameplayTag StimulusTag;

    UPROPERTY(BlueprintReadWrite, EditAnywhere)
    TMap<FString, FString> AdditionalData;
};